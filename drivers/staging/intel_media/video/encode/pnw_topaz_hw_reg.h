/**************************************************************************
 *
 * Copyright (c) 2007 Intel Corporation, Hillsboro, OR, USA
 * Copyright (c) Imagination Technologies Limited, UK
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
 *
 **************************************************************************/

#ifndef _PNW_TOPAZ_HW_REG_H_
#define _PNW_TOPAZ_HW_REG_H_

#include "psb_drv.h"
#include "img_types.h"
#include "pnw_topaz.h"

/*
 * MACROS to insert values into fields within a word. The basename of the
 * field must have MASK_BASENAME and SHIFT_BASENAME constants.
 */
#define MM_WRITE32(base, offset, value)  \
do {				       \
	*((unsigned long *)((unsigned char *)(dev_priv->topaz_reg)	\
				+ base + offset)) = value;		\
} while (0)

#define MM_READ32(base, offset, pointer) \
do {                                   \
	*(pointer) = *((unsigned long *)((unsigned char *)(dev_priv->topaz_reg)\
						+ base + offset));	\
} while (0)

#define F_MASK(basename)  (MASK_##basename)
#define F_SHIFT(basename) (SHIFT_##basename)

#define F_ENCODE(val, basename)  \
	(((val) << (F_SHIFT(basename))) & (F_MASK(basename)))


#define F_EXTRACT(val, basename) (((val) & (F_MASK(basename))) >> (F_SHIFT(basename)))

/*! The number of TOPAZ cores present in the system */
#define TOPAZSC_NUM_CORES 2

/* The max RAM memory firmware will use */
#define TOPAZ_MASTER_FW_MAX (22 * 1024)
#define TOPAZ_SLAVE_FW_MAX (18 * 1024)

#define TOPAZSC_REG_OFF_MAX (TOPAZSC_NUM_CORES * 0x10000 + 0x10000)
#define TOPAZSC_REG_OFF_MIN (0x10000)
#define REG_BASE_MTX                        0x04800000
#define REG_BASE_HOST                       0x00000000

#define MTX_CORE_CODE_MEM       (0x10)
#define MTX_CORE_DATA_MEM       (0x18)

/* Multicore Regs */
#define REG_OFFSET_TOPAZ_MULTICORE	0x00000000
#define REG_OFFSET_TOPAZ_DMAC		0x00001000

#define REG_SIZE_TOPAZ_MULTICORE	0x00001000
#define REG_SIZE_TOPAZ_DMAC		0x00001000

/* Topaz core registers - Host view */
#define REG_OFFSET_TOPAZ_CORE_HOST	0x00010000
#define REG_SIZE_TOPAZ_CORE_HOST	0x00010000

#define REG_OFFSET_TOPAZ_MTX_HOST	0x00000000
#define REG_OFFSET_TOPAZ_TOPAZ_HOST	0x00002000
#define REG_OFFSET_TOPAZ_MVEA_HOST	0x00003000
#define REG_OFFSET_TOPAZ_MVEACMD_HOST	0x00004000
#define REG_OFFSET_TOPAZ_VLC_HOST	0x00005000
#define REG_OFFSET_TOPAZ_DEBLOCKER_HOST	0x00006000
#define REG_OFFSET_TOPAZ_COMMS_HOST	0x00007000
#define REG_OFFSET_TOPAZ_ESB_HOST	0x00008000

#define MVEA_CR_SPE_PRED_VECTOR_BIAS_TABLE 0x037C
#define MVEA_CR_IPE_LAMBDA_TABLE	0x01F0
#define TOPAZ_BIASREG_MAX(core) \
	(core * 0x10000 \
	+ 0x10000 + REG_OFFSET_TOPAZ_MVEA_HOST \
	+ MVEA_CR_SPE_PRED_VECTOR_BIAS_TABLE)

#define TOPAZ_BIASREG_MIN(core) \
	(core * 0x10000 \
	+ 0x10000 + REG_OFFSET_TOPAZ_MVEA_HOST \
	+ MVEA_CR_IPE_LAMBDA_TABLE)

#define REG_SIZE_TOPAZ_MTX_HOST	0x00002000
#define REG_SIZE_TOPAZ_TOPAZ_HOST	0x00001000
#define REG_SIZE_TOPAZ_MVEA_HOST	0x00001000
#define REG_SIZE_TOPAZ_MVEACMD_HOST	0x00001000
#define REG_SIZE_TOPAZ_VLC_HOST	0x00001000
#define REG_SIZE_TOPAZ_DEBLOCKER_HOST	0x00001000
#define REG_SIZE_TOPAZ_COMMS_HOST	0x00001000
#define REG_SIZE_TOPAZ_ESB_HOST	0x00004000


/* Topaz core registers MTX view */
#define REG_OFFSET_TOPAZ_CORE_MTX	0x00010000	/* MUST confirm */
#define REG_SIZE_TOPAZ_CORE_MTX	0x00010000	/* MUST confirm */

#define REG_OFFSET_TOPAZ_MTX_MTX	0x00000000
#define REG_OFFSET_TOPAZ_TOPAZ_MTX	0x00000800
#define REG_OFFSET_TOPAZ_MVEA_MTX	0x00000C00
#define REG_OFFSET_TOPAZ_MVEACMD_MTX	0x00001000
#define REG_OFFSET_TOPAZ_VLC_MTX	0x00001400
#define REG_OFFSET_TOPAZ_DEBLOCKER_MTX	0x00001800
#define REG_OFFSET_TOPAZ_COMMS_MTX	0x00001C00
#define REG_OFFSET_TOPAZ_ESB_MTX	0x00002000

#define REG_SIZE_TOPAZ_MTX_MTX		0x00000800
#define REG_SIZE_TOPAZ_TOPAZ_MTX	0x00000400
#define REG_SIZE_TOPAZ_MVEA_MTX		0x00000400
#define REG_SIZE_TOPAZ_MVEACMD_MTX	0x00000400
#define REG_SIZE_TOPAZ_VLC_MTX		0x00000400
#define REG_SIZE_TOPAZ_DEBLOCKER_MTX	0x00000400
#define REG_SIZE_TOPAZ_COMMS_MTX	0x00000400
#define REG_SIZE_TOPAZ_ESB_MTX		0x00002000


/* Register bank addresses - Host View */
#define REG_START_TOPAZ_MULTICORE_HOST	(REG_BASE_HOST + REG_OFFSET_TOPAZ_MULTICORE)
#define REG_END_TOPAZ_MULTICORE_HOST	(REG_START_TOPAZ_MULTICORE_HOST + REG_SIZE_TOPAZ_MULTICORE)

#define REG_START_TOPAZ_DMAC_HOST	(REG_BASE_HOST + REG_OFFSET_TOPAZ_DMAC)
#define REG_END_TOPAZ_DMAC_HOST		(REG_START_TOPAZ_DMAC_HOST + REG_SIZE_TOPAZ_DMAC)

#define REG_START_TOPAZ_MTX_HOST(core)	(REG_BASE_HOST + (REG_SIZE_TOPAZ_CORE_HOST*core) + REG_OFFSET_TOPAZ_CORE_HOST + REG_OFFSET_TOPAZ_MTX_HOST)
#define REG_END_TOPAZ_MTX_HOST(core)	(REG_START_TOPAZ_MTX_HOST(core) + REG_SIZE_TOPAZ_MTX_HOST)

#define REG_START_TOPAZ_TOPAZ_HOST(core)	(REG_BASE_HOST + (REG_SIZE_TOPAZ_CORE_HOST*core) + REG_OFFSET_TOPAZ_CORE_HOST + REG_OFFSET_TOPAZ_TOPAZ_HOST)
#define REG_END_TOPAZ_TOPAZ_HOST(core)	(REG_START_TOPAZ_TOPAZ_HOST(core) + REG_SIZE_TOPAZ_TOPAZ_HOST)

#define REG_START_TOPAZ_MVEA_HOST(core)	(REG_BASE_HOST + (REG_SIZE_TOPAZ_CORE_HOST*core) + REG_OFFSET_TOPAZ_CORE_HOST + REG_OFFSET_TOPAZ_MVEA_HOST)
#define REG_END_TOPAZ_MVEA_HOST(core)	(REG_START_TOPAZ_MVEA_HOST(core) + REG_SIZE_TOPAZ_MVEA_HOST)


/* Register bank addresses - MTX view */
#define REG_START_TOPAZ_MULTICORE_MTX	(REG_BASE_MTX + REG_OFFSET_TOPAZ_MULTICORE)
#define REG_END_TOPAZ_MULTICORE_MTX	(REG_START_TOPAZ_MULTICORE_MTX + REG_SIZE_TOPAZ_MULTICORE)

#define REG_START_TOPAZ_DMAC_MTX	(REG_BASE_MTX + REG_OFFSET_TOPAZ_DMAC)
#define REG_END_TOPAZ_DMAC_MTX		(REG_START_TOPAZ_DMAC_MTX + REG_SIZE_TOPAZ_DMAC)

#define REG_START_TOPAZ_MTX_MTX(core)	(REG_BASE_MTX + (REG_SIZE_TOPAZ_CORE_MTX*core) + REG_OFFSET_TOPAZ_CORE_MTX + REG_OFFSET_TOPAZ_MTX_MTX)
#define REG_END_TOPAZ_MTX_MTX(core)	(REG_START_TOPAZ_MTX_MTX(core) + REG_SIZE_TOPAZ_MTX_MTX)

#define REG_START_TOPAZ_TOPAZ_MTX(core)	(REG_BASE_MTX + (REG_SIZE_TOPAZ_CORE_MTX*core) + REG_OFFSET_TOPAZ_CORE_MTX + REG_OFFSET_TOPAZ_TOPAZ_MTX)
#define REG_END_TOPAZ_TOPAZ_MTX(core)	(REG_START_TOPAZ_TOPAZ_MTX(core) + REG_SIZE_TOPAZ_TOPAZ_MTX)

#define REG_START_TOPAZ_MVEA_MTX(core)	(REG_BASE_MTX + (REG_SIZE_TOPAZ_CORE_MTX*core) + REG_OFFSET_TOPAZ_CORE_MTX + REG_OFFSET_TOPAZ_MVEA_MTX)
#define REG_END_TOPAZ_MVEA_MTX(core)	(REG_START_TOPAZ_MVEA_MTX(core) + REG_SIZE_TOPAZ_MVEA_MTX)


/* Every Topaz core has a 64K address space*/
#define TOPAZ_CORE_REG_BASE(core) (REG_BASE_HOST + (REG_SIZE_TOPAZ_CORE_HOST*core) + REG_OFFSET_TOPAZ_CORE_HOST)

/* MVEA macro */
#define MVEA_START 0x03000

#ifdef TOPAZ_PDUMP
#define MVEA_WRITE32(offset, value, core) \
	do { \
		MM_WRITE32(MVEA_START + TOPAZ_CORE_REG_BASE(core), offset, value); \
		DRM_ERROR("TOPAZ_PDUMP: MVEA core %d, REG_WT %x %x\n", core, offset, value); \
	} while (0)
#define MVEA_READ32(offset, pointer, core) \
	do { \
		MM_READ32(MVEA_START + TOPAZ_CORE_REG_BASE(core), offset, pointer); \
		DRM_ERROR("TOPAZ_PDUMP: MVEA core %d, REG_RD %x %x\n", core, offset, *(uint32_t *)pointer);\
	} while (0)
#else
#define MVEA_WRITE32(offset, value, core) \
		MM_WRITE32(MVEA_START + TOPAZ_CORE_REG_BASE(core), offset, value)

#define MVEA_READ32(offset, pointer, core) \
		MM_READ32(MVEA_START + TOPAZ_CORE_REG_BASE(core), offset, pointer)
#endif

#define F_MASK_MVEA(basename)  (MASK_MVEA_##basename)	/*     MVEA    */
#define F_SHIFT_MVEA(basename) (SHIFT_MVEA_##basename)	/*     MVEA    */
#define F_ENCODE_MVEA(val, basename)  \
	(((val)<<(F_SHIFT_MVEA(basename)))&(F_MASK_MVEA(basename)))

/* MVEA ESB macro */
#define MVEA_ESB_START 0x08000

#ifdef TOPAZ_PDUMP
#define MVEA_ESB_WRITE32(offset, value, core) \
	do { \
		MM_WRITE32(MVEA_ESB_START + TOPAZ_CORE_REG_BASE(core),\
				offset, value); \
		DRM_ERROR("TOPAZ_PDUMP: MVEA core %d, REG_WT %x %x\n", \
				core, offset, value); \
	} while (0)
#define MVEA_ESB_READ32(offset, pointer, core) \
	do { \
		MM_READ32(MVEA_ESB_START + TOPAZ_CORE_REG_BASE(core),\
				offset, pointer); \
		DRM_ERROR("TOPAZ_PDUMP: MVEA core %d, REG_RD %x %x\n", \
				core, offset, *(uint32_t *)pointer);\
	} while (0)
#else
#define MVEA_ESB_WRITE32(offset, value, core) \
		MM_WRITE32(MVEA_ESB_START + TOPAZ_CORE_REG_BASE(core), \
				offset, value)

#define MVEA_ESB_READ32(offset, pointer, core) \
		MM_READ32(MVEA_ESB_START + TOPAZ_CORE_REG_BASE(core), \
				offset, pointer)
#endif


/* VLC macro */
#define TOPAZ_VLC_START 0x05000

/* TOPAZ macro */
#define TOPAZ_START 0x02000

#ifdef TOPAZ_PDUMP
#define TOPAZ_WRITE32(offset, value, core) \
	do {\
		MM_WRITE32(TOPAZ_START + TOPAZ_CORE_REG_BASE(core), offset, value); \
		DRM_ERROR("TOPAZ_PDUMP: TOPAZ_CORE %d REG_WT: %x %x\n", core,  \
			 offset, value);\
	} while (0)
#define TOPAZ_READ32(offset, pointer, core) \
	do { \
		MM_READ32(TOPAZ_START + TOPAZ_CORE_REG_BASE(core), offset, pointer); \
		DRM_ERROR("TOPAZ_PDUMP: TOPAZ_CORE %d REG_RD: %x %x\n", core, \
			offset, *(uint32_t *)pointer);\
	} while (0)
#else
#define TOPAZ_WRITE32(offset, value, core) \
		MM_WRITE32(TOPAZ_START + TOPAZ_CORE_REG_BASE(core), offset, value)
#define TOPAZ_READ32(offset, pointer, core) \
		MM_READ32(TOPAZ_START + TOPAZ_CORE_REG_BASE(core), offset, pointer)
#endif
#define F_MASK_TOPAZ(basename)  (MASK_TOPAZ_##basename)
#define F_SHIFT_TOPAZ(basename) (SHIFT_TOPAZ_##basename)
#define F_ENCODE_TOPAZ(val, basename) \
	(((val)<<(F_SHIFT_TOPAZ(basename)))&(F_MASK_TOPAZ(basename)))

/* MTX macro */
#define MTX_START 0x0

#ifdef TOPAZ_PDUMP
#define MTX_WRITE32(offset, value, core) \
	do { \
		MM_WRITE32(MTX_START + TOPAZ_CORE_REG_BASE(core), offset, value); \
		DRM_ERROR("TOPAZ_PDUMP: MTX core %d REG_WT: %x %x\n", core,\
			offset, value);\
	} while (0)


#define MTX_READ32(offset, pointer, core) \
	do { \
		MM_READ32(MTX_START + TOPAZ_CORE_REG_BASE(core), offset, pointer); \
		DRM_ERROR("TOPAZ_PDUMP: MTX core %d REG_RD %x %x\n", core, \
			offset, *(uint32_t *)pointer); \
	} while (0);
#else

#define MTX_WRITE32(offset, value, core) \
		MM_WRITE32(MTX_START + TOPAZ_CORE_REG_BASE(core), offset, value)
#define MTX_READ32(offset, pointer, core) \
		MM_READ32(MTX_START + TOPAZ_CORE_REG_BASE(core), offset, pointer)
#endif

/* DMAC macro */
#define DMAC_START 0x01000

#ifdef TOPAZ_DUMP
#define DMAC_WRITE32(offset, value) \
	do { \
		 MM_WRITE32(DMAC_START, offset, value);\
		DRM_ERROR("TOPAZ_PDUMP: DMAC WT %x %x\n", offset, value);\
	} while (0);

#define DMAC_READ32(offset, pointer) \
	do {\
		MM_READ32(DMAC_START, offset, pointer);\
		DRM_ERROR("TOPAZ_PDUMP: DMAC RD %x %x\n", offset, *(uint32_t *)pointer); \
	} while (0)
#else

#define DMAC_WRITE32(offset, value) \
		 MM_WRITE32(DMAC_START, offset, value)

#define DMAC_READ32(offset, pointer) \
		MM_READ32(DMAC_START, offset, pointer)
#endif
#define F_MASK_DMAC(basename)  (MASK_DMAC_##basename)
#define F_SHIFT_DMAC(basename) (SHIFT_DMAC_##basename)
#define F_ENCODE_DMAC(val, basename)  \
	(((val)<<(F_SHIFT_DMAC(basename)))&(F_MASK_DMAC(basename)))

#define TOPAZ_CR_FIRMWARE_REG_1 (0x100)
#define MTX_SCRATCHREG_TOMTX (2)
#define TOPAZ_FIRMWARE_MAGIC (0xa5a5a5a5)

/* Register CR_IMG_TOPAZ_INTENAB */
#define TOPAZ_CR_IMG_TOPAZ_INTENAB  0x0008
#define MASK_TOPAZ_CR_IMG_TOPAZ_INTEN_MVEA 0x00000001
#define SHIFT_TOPAZ_CR_IMG_TOPAZ_INTEN_MVEA 0
#define REGNUM_TOPAZ_CR_IMG_TOPAZ_INTEN_MVEA 0x0008

#define MASK_TOPAZ_CR_IMG_TOPAZ_INTEN_MTX 0x00000002
#define SHIFT_TOPAZ_CR_IMG_TOPAZ_INTEN_MTX 1
#define REGNUM_TOPAZ_CR_IMG_TOPAZ_INTEN_MTX 0x0008

#define MASK_TOPAZ_CR_IMG_TOPAZ_INTEN_MTX_HALT 0x00000004
#define SHIFT_TOPAZ_CR_IMG_TOPAZ_INTEN_MTX_HALT 2
#define REGNUM_TOPAZ_CR_IMG_TOPAZ_INTEN_MTX_HALT 0x0008

/*(Bit 3 enables fault interrupts caused by the topaz_cores. Bit 4 enables
 * fault interrupts caused by the DMAC)*/
#define MASK_TOPAZ_CR_IMG_TOPAZ_INTEN_MMU_FAULT 0x00000018
#define SHIFT_TOPAZ_CR_IMG_TOPAZ_INTEN_MMU_FAULT 3
#define REGNUM_TOPAZ_CR_IMG_TOPAZ_INTEN_MMU_FAULT 0x0008

#define MASK_TOPAZ_CR_IMG_TOPAZ_MAS_INTEN 0x80000000
#define SHIFT_TOPAZ_CR_IMG_TOPAZ_MAS_INTEN 31
#define REGNUM_TOPAZ_CR_IMG_TOPAZ_MAS_INTEN 0x0008

#define TOPAZ_CR_IMG_TOPAZ_INTCLEAR 0x000C
#define MASK_TOPAZ_CR_IMG_TOPAZ_INTCLR_MVEA 0x00000001
#define SHIFT_TOPAZ_CR_IMG_TOPAZ_INTCLR_MVEA 0
#define REGNUM_TOPAZ_CR_IMG_TOPAZ_INTCLR_MVEA 0x000C

#define TOPAZ_CR_IMG_TOPAZ_INTSTAT  0x0004
#define MASK_TOPAZ_CR_IMG_TOPAZ_INTS_MVEA 0x00000001
#define SHIFT_TOPAZ_CR_IMG_TOPAZ_INTS_MVEA 0
#define REGNUM_TOPAZ_CR_IMG_TOPAZ_INTS_MVEA 0x0004

#define MTX_CCBCTRL_ROFF		0
#define MTX_CCBCTRL_COMPLETE		4
#define MTX_CCBCTRL_CCBSIZE		8
#define MTX_CCBCTRL_QP			12
#define MTX_CCBCTRL_FRAMESKIP		20
#define MTX_CCBCTRL_INITQP		24

#define TOPAZ_CR_MMU_STATUS         0x001C
#define MASK_TOPAZ_CR_MMU_PF_N_RW   0x00000001
#define SHIFT_TOPAZ_CR_MMU_PF_N_RW  0
#define REGNUM_TOPAZ_CR_MMU_PF_N_RW 0x001C

#define MASK_TOPAZ_CR_IMG_TOPAZ_INTCLR_MMU_FAULT 0x00000008
#define SHIFT_TOPAZ_CR_IMG_TOPAZ_INTCLR_MMU_FAULT 3
#define REGNUM_TOPAZ_CR_IMG_TOPAZ_INTCLR_MMU_FAULT 0x000C

#define TOPAZ_CR_MMU_MEM_REQ        0x0020
#define MASK_TOPAZ_CR_MEM_REQ_STAT_READS 0x000000FF
#define SHIFT_TOPAZ_CR_MEM_REQ_STAT_READS 0
#define REGNUM_TOPAZ_CR_MEM_REQ_STAT_READS 0x0020

#define MASK_TOPAZ_CR_IMG_TOPAZ_INTCLR_MTX 0x00000002
#define SHIFT_TOPAZ_CR_IMG_TOPAZ_INTCLR_MTX 1
#define REGNUM_TOPAZ_CR_IMG_TOPAZ_INTCLR_MTX 0x000C

#define MASK_TOPAZ_CR_IMG_TOPAZ_INTCLR_MTX_HALT 0x00000004
#define SHIFT_TOPAZ_CR_IMG_TOPAZ_INTCLR_MTX_HALT 2
#define REGNUM_TOPAZ_CR_IMG_TOPAZ_INTCLR_MTX_HALT 0x000C

/* Register CR_TOPAZ_CMD_FIFO_2 */
#define TOPAZ_CR_TOPAZ_CMD_FIFO_2   0x005C
#define MASK_TOPAZ_CR_CMD_FIFO_FLUSH 0x00000001
#define SHIFT_TOPAZ_CR_CMD_FIFO_FLUSH 0
#define REGNUM_TOPAZ_CR_CMD_FIFO_FLUSH 0x005C

#define MTX_CR_MTX_KICK             0x0080
#define MASK_MTX_MTX_KICK           0x0000FFFF
#define SHIFT_MTX_MTX_KICK          0
#define REGNUM_MTX_MTX_KICK         0x0080

#define MTX_DATA_MEM_BASE		0x82880000

#define MTX_CR_MTX_RAM_ACCESS_CONTROL 0x0108
#define MASK_MTX_MTX_MCMR           0x00000001
#define SHIFT_MTX_MTX_MCMR          0
#define REGNUM_MTX_MTX_MCMR         0x0108

#define MASK_MTX_MTX_MCMID          0x0FF00000
#define SHIFT_MTX_MTX_MCMID         20
#define REGNUM_MTX_MTX_MCMID        0x0108

#define MASK_MTX_MTX_MCM_ADDR       0x000FFFFC
#define SHIFT_MTX_MTX_MCM_ADDR      2
#define REGNUM_MTX_MTX_MCM_ADDR     0x0108

#define MTX_CR_MTX_RAM_ACCESS_STATUS 0x010C
#define MASK_MTX_MTX_MTX_MCM_STAT   0x00000001
#define SHIFT_MTX_MTX_MTX_MCM_STAT  0
#define REGNUM_MTX_MTX_MTX_MCM_STAT 0x010C

#define MASK_MTX_MTX_MCMAI          0x00000002
#define SHIFT_MTX_MTX_MCMAI         1
#define REGNUM_MTX_MTX_MCMAI        0x0108

#define MVEA_CR_MVEA_BUSY           0x0018
#define MVEA_CR_MVEA_DMACMDFIFO_WAIT 0x001C
#define MVEA_CR_MVEA_DMACMDFIFO_STATUS 0x0020

#define MVEA_CR_IMG_MVEA_SRST       0x0000
#define MASK_MVEA_CR_IMG_MVEA_SPE_SOFT_RESET 0x00000001
#define SHIFT_MVEA_CR_IMG_MVEA_SPE_SOFT_RESET 0
#define REGNUM_MVEA_CR_IMG_MVEA_SPE_SOFT_RESET 0x0000

#define MASK_MVEA_CR_IMG_MVEA_IPE_SOFT_RESET 0x00000002
#define SHIFT_MVEA_CR_IMG_MVEA_IPE_SOFT_RESET 1
#define REGNUM_MVEA_CR_IMG_MVEA_IPE_SOFT_RESET 0x0000

#define MASK_MVEA_CR_IMG_MVEA_CMPRS_SOFT_RESET 0x00000004
#define SHIFT_MVEA_CR_IMG_MVEA_CMPRS_SOFT_RESET 2
#define REGNUM_MVEA_CR_IMG_MVEA_CMPRS_SOFT_RESET 0x0000

#define MASK_MVEA_CR_IMG_MVEA_JMCOMP_SOFT_RESET 0x00000008
#define SHIFT_MVEA_CR_IMG_MVEA_JMCOMP_SOFT_RESET 3
#define REGNUM_MVEA_CR_IMG_MVEA_JMCOMP_SOFT_RESET 0x0000

#define MASK_MVEA_CR_IMG_MVEA_CMC_SOFT_RESET 0x00000010
#define SHIFT_MVEA_CR_IMG_MVEA_CMC_SOFT_RESET 4
#define REGNUM_MVEA_CR_IMG_MVEA_CMC_SOFT_RESET 0x0000

#define MASK_MVEA_CR_IMG_MVEA_DCF_SOFT_RESET 0x00000020
#define SHIFT_MVEA_CR_IMG_MVEA_DCF_SOFT_RESET 5
#define REGNUM_MVEA_CR_IMG_MVEA_DCF_SOFT_RESET 0x0000

#define TOPAZ_CR_IMG_TOPAZ_CORE_ID  0x03C0
#define TOPAZ_CR_IMG_TOPAZ_CORE_REV 0x03D0

#define TOPAZ_MTX_PC		(0x00000005)

#define TOPAZ_CR_TOPAZ_AUTO_CLK_GATE 0x0014
#define MASK_TOPAZ_CR_TOPAZ_VLC_AUTO_CLK_GATE 0x00000001
#define SHIFT_TOPAZ_CR_TOPAZ_VLC_AUTO_CLK_GATE 0
#define REGNUM_TOPAZ_CR_TOPAZ_VLC_AUTO_CLK_GATE 0x0014

#define MASK_TOPAZ_CR_TOPAZ_DB_AUTO_CLK_GATE 0x00000002
#define SHIFT_TOPAZ_CR_TOPAZ_DB_AUTO_CLK_GATE 1
#define REGNUM_TOPAZ_CR_TOPAZ_DB_AUTO_CLK_GATE 0x0014

#define	MTX_CORE_CR_MTX_REGISTER_READ_WRITE_DATA_OFFSET 0x000000F8
#define	MTX_CORE_CR_MTX_REGISTER_READ_WRITE_REQUEST_OFFSET 0x000000FC
#define	MTX_CORE_CR_MTX_REGISTER_READ_WRITE_REQUEST_MTX_RNW_MASK 0x00010000
#define	MTX_CORE_CR_MTX_REGISTER_READ_WRITE_REQUEST_MTX_DREADY_MASK 0x80000000

#define	TOPAZ_CORE_CR_MTX_DEBUG_OFFSET	0x00000044

#define MASK_TOPAZ_CR_MTX_RAM_BANKS 0x00000F00
#define SHIFT_TOPAZ_CR_MTX_RAM_BANKS 8
#define REGNUM_TOPAZ_CR_MTX_RAM_BANKS 0x0044

#define MASK_TOPAZ_CR_MTX_RAM_BANK_SIZE 0x000F0000
#define SHIFT_TOPAZ_CR_MTX_RAM_BANK_SIZE 16
#define REGNUM_TOPAZ_CR_MTX_RAM_BANK_SIZE 0x0044

#define MASK_TOPAZ_CR_MTX_LAST_RAM_BANK_SIZE 0x0F000000
#define SHIFT_TOPAZ_CR_MTX_LAST_RAM_BANK_SIZE 24
#define REGNUM_TOPAZ_CR_MTX_LAST_RAM_BANK_SIZE 0x0044

#define MASK_TOPAZ_CR_MTX_DBG_IS_SLAVE 0x00000004
#define SHIFT_TOPAZ_CR_MTX_DBG_IS_SLAVE 2
#define REGNUM_TOPAZ_CR_MTX_DBG_IS_SLAVE 0x003C

#define MASK_TOPAZ_CR_MTX_DBG_GPIO_OUT 0x00000018
#define SHIFT_TOPAZ_CR_MTX_DBG_GPIO_OUT 3
#define REGNUM_TOPAZ_CR_MTX_DBG_GPIO_OUT 0x003C

/* Register CR_MTX_RAM_ACCESS_DATA_EXCHANGE */
#define MTX_CR_MTX_RAM_ACCESS_DATA_EXCHANGE 0x0100
/* Register CR_MTX_RAM_ACCESS_DATA_TRANSFER */
#define MTX_CR_MTX_RAM_ACCESS_DATA_TRANSFER 0x0104

#define	MTX_CORE_CR_MTX_RAM_ACCESS_CONTROL_OFFSET 0x00000108
#define MASK_MTX_MTX_MCMR           0x00000001
#define SHIFT_MTX_MTX_MCMR          0
#define REGNUM_MTX_MTX_MCMR         0x0108

#define MASK_MTX_MTX_MCMAI          0x00000002
#define SHIFT_MTX_MTX_MCMAI         1
#define REGNUM_MTX_MTX_MCMAI        0x0108

#define MASK_MTX_MTX_MCM_ADDR       0x000FFFFC
#define SHIFT_MTX_MTX_MCM_ADDR      2
#define REGNUM_MTX_MTX_MCM_ADDR     0x0108

#define MASK_MTX_MTX_MCMID          0x0FF00000
#define SHIFT_MTX_MTX_MCMID         20
#define REGNUM_MTX_MTX_MCMID        0x0108

#define TOPAZ_CR_MMU_CONTROL0       0x0024
#define MASK_TOPAZ_CR_MMU_BYPASS_DMAC 0x00020000
#define SHIFT_TOPAZ_CR_MMU_BYPASS_DMAC 17
#define REGNUM_TOPAZ_CR_MMU_BYPASS_DMAC 0x0024

#define MASK_TOPAZ_CR_MMU_BYPASS    0x00010000
#define SHIFT_TOPAZ_CR_MMU_BYPASS   16
#define REGNUM_TOPAZ_CR_MMU_BYPASS  0x0024

#define TOPAZ_CR_MMU_DIR_LIST_BASE(X) (0x0030 + (4 * (X)))
#define MASK_TOPAZ_CR_MMU_DIR_LIST_BASE_ADDR 0xFFFFF000
#define SHIFT_TOPAZ_CR_MMU_DIR_LIST_BASE_ADDR 12
#define REGNUM_TOPAZ_CR_MMU_DIR_LIST_BASE_ADDR 0x0030

#define MASK_TOPAZ_CR_MMU_INVALDC   0x00000008
#define SHIFT_TOPAZ_CR_MMU_INVALDC  3
#define REGNUM_TOPAZ_CR_MMU_INVALDC 0x0024

#define MASK_TOPAZ_CR_MMU_FLUSH     0x00000004
#define SHIFT_TOPAZ_CR_MMU_FLUSH    2
#define REGNUM_TOPAZ_CR_MMU_FLUSH   0x0024

#define TOPAZ_CR_MMU_CONTROL1       0x0028
#define TOPAZ_CR_MMU_TILE_BASE0     0x0038

/* Register CR_MMU_BANK_INDEX */
#define TOPAZ_CR_MMU_BANK_INDEX     0x0040
#define MASK_TOPAZ_CR_MMU_BANK_N_INDEX_M(i) (0x00000003 << (8 + ((i) * 2)))
#define SHIFT_TOPAZ_CR_MMU_BANK_N_INDEX_M(i) (8 + ((i) * 2))
#define REGNUM_TOPAZ_CR_MMU_BANK_N_INDEX_M(i) 0x0040

#define MASK_TOPAZ_CR_MMU_BANK_SELECT(i) (0x00000001 << (0 + ((i) * 1)))
#define SHIFT_TOPAZ_CR_MMU_BANK_SELECT(i) (0 + ((i) * 1))
#define REGNUM_TOPAZ_CR_MMU_BANK_SELECT(i) 0x0040

#define TOPAZ_CR_TOPAZ_MAN_CLK_GATE 0x0010
#define MASK_TOPAZ_CR_TOPAZ_MTX_MAN_CLK_GATE 0x00000002
#define SHIFT_TOPAZ_CR_TOPAZ_MTX_MAN_CLK_GATE 1
#define REGNUM_TOPAZ_CR_TOPAZ_MTX_MAN_CLK_GATE 0x0010

#define MTX_CORE_CR_MTX_TXRPT_OFFSET 0x0000000c
#define TXRPT_WAITONKICK_VALUE 0x8ade0000

#define MTX_CORE_CR_MTX_ENABLE_MTX_TOFF_MASK 0x00000002

#define MTX_CORE_CR_MTX_ENABLE_OFFSET 0x00000000
#define	MTX_CORE_CR_MTX_ENABLE_MTX_ENABLE_MASK 0x00000001

#define MASK_TOPAZ_CR_IMG_TOPAZ_INTS_MTX 0x00000002
#define SHIFT_TOPAZ_CR_IMG_TOPAZ_INTS_MTX 1
#define REGNUM_TOPAZ_CR_IMG_TOPAZ_INTS_MTX 0x0004

#define	MTX_CORE_CR_MTX_SOFT_RESET_OFFSET 0x00000200
#define	MTX_CORE_CR_MTX_SOFT_RESET_MTX_RESET_MASK 0x00000001

#define MTX_CR_MTX_SYSC_CDMAA       0x0344
#define MASK_MTX_CDMAA_ADDRESS      0x03FFFFFC
#define SHIFT_MTX_CDMAA_ADDRESS     2
#define REGNUM_MTX_CDMAA_ADDRESS    0x0344

#define MTX_CR_MTX_SYSC_CDMAC       0x0340
#define MASK_MTX_LENGTH             0x0000FFFF
#define SHIFT_MTX_LENGTH            0
#define REGNUM_MTX_LENGTH           0x0340

#define MASK_MTX_BURSTSIZE          0x07000000
#define SHIFT_MTX_BURSTSIZE         24
#define REGNUM_MTX_BURSTSIZE        0x0340

#define MASK_MTX_RNW                0x00020000
#define SHIFT_MTX_RNW               17
#define REGNUM_MTX_RNW              0x0340

#define MASK_MTX_ENABLE             0x00010000
#define SHIFT_MTX_ENABLE            16
#define REGNUM_MTX_ENABLE           0x0340

#define MASK_MTX_LENGTH             0x0000FFFF
#define SHIFT_MTX_LENGTH            0
#define REGNUM_MTX_LENGTH           0x0340

#define TOPAZ_CR_IMG_TOPAZ_SRST     0x0000
#define MASK_TOPAZ_CR_IMG_TOPAZ_MVEA_SOFT_RESET 0x00000001
#define SHIFT_TOPAZ_CR_IMG_TOPAZ_MVEA_SOFT_RESET 0
#define REGNUM_TOPAZ_CR_IMG_TOPAZ_MVEA_SOFT_RESET 0x0000

#define MASK_TOPAZ_CR_IMG_TOPAZ_IO_SOFT_RESET 0x00000004
#define SHIFT_TOPAZ_CR_IMG_TOPAZ_IO_SOFT_RESET 2
#define REGNUM_TOPAZ_CR_IMG_TOPAZ_IO_SOFT_RESET 0x0000
#define SIGNED_TOPAZ_CR_IMG_TOPAZ_IO_SOFT_RESET 0

#define MASK_TOPAZ_CR_IMG_TOPAZ_VLC_SOFT_RESET 0x00000008
#define SHIFT_TOPAZ_CR_IMG_TOPAZ_VLC_SOFT_RESET 3
#define REGNUM_TOPAZ_CR_IMG_TOPAZ_VLC_SOFT_RESET 0x0000
#define SIGNED_TOPAZ_CR_IMG_TOPAZ_VLC_SOFT_RESET 0

#define MASK_TOPAZ_CR_IMG_TOPAZ_DB_SOFT_RESET 0x00000010
#define SHIFT_TOPAZ_CR_IMG_TOPAZ_DB_SOFT_RESET 4
#define REGNUM_TOPAZ_CR_IMG_TOPAZ_DB_SOFT_RESET 0x0000
#define SIGNED_TOPAZ_CR_IMG_TOPAZ_DB_SOFT_RESET 0

#define MASK_TOPAZ_CR_IMG_TOPAZ_MTX_SOFT_RESET 0x00000002
#define SHIFT_TOPAZ_CR_IMG_TOPAZ_MTX_SOFT_RESET 1
#define REGNUM_TOPAZ_CR_IMG_TOPAZ_MTX_SOFT_RESET 0x0000

#define MVEA_CR_MVEA_AUTO_CLOCK_GATING 0x0024
#define MASK_MVEA_CR_MVEA_SPE_AUTO_CLK_GATE 0x00000001
#define SHIFT_MVEA_CR_MVEA_SPE_AUTO_CLK_GATE 0
#define REGNUM_MVEA_CR_MVEA_SPE_AUTO_CLK_GATE 0x0024

#define MASK_MVEA_CR_MVEA_IPE_AUTO_CLK_GATE 0x00000002
#define SHIFT_MVEA_CR_MVEA_IPE_AUTO_CLK_GATE 1
#define REGNUM_MVEA_CR_MVEA_IPE_AUTO_CLK_GATE 0x0024

#define MASK_MVEA_CR_MVEA_CMPRS_AUTO_CLK_GATE 0x00000004
#define SHIFT_MVEA_CR_MVEA_CMPRS_AUTO_CLK_GATE 2
#define REGNUM_MVEA_CR_MVEA_CMPRS_AUTO_CLK_GATE 0x0024

#define MASK_MVEA_CR_MVEA_JMCOMP_AUTO_CLK_GATE 0x00000008
#define SHIFT_MVEA_CR_MVEA_JMCOMP_AUTO_CLK_GATE 3
#define REGNUM_MVEA_CR_MVEA_JMCOMP_AUTO_CLK_GATE 0x0024

/*#define TOPAZ_CR_IMG_TOPAZ_DMAC_MODE 0x0040
#define MASK_TOPAZ_CR_DMAC_MASTER_MODE 0x00000001
#define SHIFT_TOPAZ_CR_DMAC_MASTER_MODE 0
#define REGNUM_TOPAZ_CR_DMAC_MASTER_MODE 0x0040*/

/* Register CR_TOPAZ_HW_CFG */
#define TOPAZ_CR_TOPAZ_HW_CFG       0x0050
#define MASK_TOPAZ_CR_NUM_CORES_SUPPORTED 0x0000001F
#define SHIFT_TOPAZ_CR_NUM_CORES_SUPPORTED 0
#define REGNUM_TOPAZ_CR_NUM_CORES_SUPPORTED 0x0050

/* Register CR_TOPAZ_CMD_FIFO_0 */
#define TOPAZ_CR_TOPAZ_CMD_FIFO_0   0x0054
#define MASK_TOPAZ_CR_CMD_FIFO_RDATA 0xFFFFFFFF
#define SHIFT_TOPAZ_CR_CMD_FIFO_RDATA 0
#define REGNUM_TOPAZ_CR_CMD_FIFO_RDATA 0x0054

/* Register CR_TOPAZ_CMD_FIFO_1 */
#define TOPAZ_CR_TOPAZ_CMD_FIFO_1   0x0058
#define MASK_TOPAZ_CR_CMD_FIFO_QUANTITY 0x000000FF
#define SHIFT_TOPAZ_CR_CMD_FIFO_QUANTITY 0
#define REGNUM_TOPAZ_CR_CMD_FIFO_QUANTITY 0x0058

#define MASK_TOPAZ_CR_CMD_FIFO_NOTEMPTY 0x00000100
#define SHIFT_TOPAZ_CR_CMD_FIFO_NOTEMPTY 8
#define REGNUM_TOPAZ_CR_CMD_FIFO_NOTEMPTY 0x0058

/* Register CR_TOPAZ_CMD_FIFO_2 */
#define TOPAZ_CR_TOPAZ_CMD_FIFO_2   0x005C
#define MASK_TOPAZ_CR_CMD_FIFO_FLUSH 0x00000001
#define SHIFT_TOPAZ_CR_CMD_FIFO_FLUSH 0
#define REGNUM_TOPAZ_CR_CMD_FIFO_FLUSH 0x005C

#define MTX_CR_MTX_SYSC_CDMAT       0x0350
#define MASK_MTX_TRANSFERDATA       0xFFFFFFFF
#define SHIFT_MTX_TRANSFERDATA      0
#define REGNUM_MTX_TRANSFERDATA     0x0350

#define IMG_SOC_DMAC_IRQ_STAT(X)    (0x000C + (32 * (X)))
#define MASK_IMG_SOC_TRANSFER_FIN   0x00020000
#define SHIFT_IMG_SOC_TRANSFER_FIN  17
#define REGNUM_IMG_SOC_TRANSFER_FIN 0x000C

#define IMG_SOC_DMAC_COUNT(X)       (0x0004 + (32 * (X)))
#define MASK_IMG_SOC_CNT            0x0000FFFF
#define SHIFT_IMG_SOC_CNT           0
#define REGNUM_IMG_SOC_CNT          0x0004

#define MASK_IMG_SOC_EN             0x00010000
#define SHIFT_IMG_SOC_EN            16
#define REGNUM_IMG_SOC_EN           0x0004

#define MASK_IMG_SOC_LIST_EN        0x00040000
#define SHIFT_IMG_SOC_LIST_EN       18
#define REGNUM_IMG_SOC_LIST_EN      0x0004

#define IMG_SOC_DMAC_PER_HOLD(X)    (0x0018 + (32 * (X)))
#define MASK_IMG_SOC_PER_HOLD       0x0000007F
#define SHIFT_IMG_SOC_PER_HOLD      0
#define REGNUM_IMG_SOC_PER_HOLD     0x0018

#define IMG_SOC_DMAC_SETUP(X)       (0x0000 + (32 * (X)))
#define MASK_IMG_SOC_START_ADDRESS  0xFFFFFFF
#define SHIFT_IMG_SOC_START_ADDRESS 0
#define REGNUM_IMG_SOC_START_ADDRESS 0x0000

#define MASK_IMG_SOC_BSWAP          0x40000000
#define SHIFT_IMG_SOC_BSWAP         30
#define REGNUM_IMG_SOC_BSWAP        0x0004

#define MASK_IMG_SOC_PW             0x18000000
#define SHIFT_IMG_SOC_PW            27
#define REGNUM_IMG_SOC_PW           0x0004

#define MASK_IMG_SOC_DIR            0x04000000
#define SHIFT_IMG_SOC_DIR           26
#define REGNUM_IMG_SOC_DIR          0x0004

#define MASK_IMG_SOC_PI             0x03000000
#define SHIFT_IMG_SOC_PI            24
#define REGNUM_IMG_SOC_PI           0x0004
#define IMG_SOC_PI_1		0x00000002
#define IMG_SOC_PI_2		0x00000001
#define IMG_SOC_PI_4		0x00000000

#define MASK_IMG_SOC_TRANSFER_IEN   0x20000000
#define SHIFT_IMG_SOC_TRANSFER_IEN  29
#define REGNUM_IMG_SOC_TRANSFER_IEN 0x0004

#define DMAC_VALUE_COUNT(BSWAP, PW, DIR, PERIPH_INCR, COUNT)        \
	((((BSWAP) << SHIFT_IMG_SOC_BSWAP) & MASK_IMG_SOC_BSWAP)|	\
		(((PW) << SHIFT_IMG_SOC_PW) & MASK_IMG_SOC_PW)|		\
		(((DIR) << SHIFT_IMG_SOC_DIR) & MASK_IMG_SOC_DIR)|	\
		(((PERIPH_INCR) << SHIFT_IMG_SOC_PI) & MASK_IMG_SOC_PI)| \
		(((COUNT) << SHIFT_IMG_SOC_CNT) & MASK_IMG_SOC_CNT))

#define IMG_SOC_DMAC_PERIPH(X)      (0x0008 + (32 * (X)))
#define MASK_IMG_SOC_EXT_SA         0x0000000F
#define SHIFT_IMG_SOC_EXT_SA        0
#define REGNUM_IMG_SOC_EXT_SA       0x0008

#define MASK_IMG_SOC_ACC_DEL        0xE0000000
#define SHIFT_IMG_SOC_ACC_DEL       29
#define REGNUM_IMG_SOC_ACC_DEL      0x0008

#define MASK_IMG_SOC_INCR           0x08000000
#define SHIFT_IMG_SOC_INCR          27
#define REGNUM_IMG_SOC_INCR         0x0008

#define MASK_IMG_SOC_BURST          0x07000000
#define SHIFT_IMG_SOC_BURST         24
#define REGNUM_IMG_SOC_BURST        0x0008

#define DMAC_VALUE_PERIPH_PARAM(ACC_DEL, INCR, BURST)             \
((((ACC_DEL) << SHIFT_IMG_SOC_ACC_DEL) & MASK_IMG_SOC_ACC_DEL)|	\
(((INCR) << SHIFT_IMG_SOC_INCR) & MASK_IMG_SOC_INCR)|             \
(((BURST) << SHIFT_IMG_SOC_BURST) & MASK_IMG_SOC_BURST))

#define IMG_SOC_DMAC_PERIPHERAL_ADDR(X) (0x0014 + (32 * (X)))
#define MASK_IMG_SOC_ADDR           0x007FFFFF
#define SHIFT_IMG_SOC_ADDR          0
#define REGNUM_IMG_SOC_ADDR         0x0014

#define SHIFT_TOPAZ_VEC_BUSY        11
#define MASK_TOPAZ_VEC_BUSY         (0x1<<SHIFT_TOPAZ_VEC_BUSY)

#define TOPAZ_MTX_TXRPT_OFFSET         0xc
#define TOPAZ_GUNIT_GVD_PSMI_GFX_OFFSET 0x20D0

#define TOPAZ_GUNIT_READ32(offset)  ioread32(dev_priv->vdc_reg + offset)
#define TOPAZ_READ_BITS(val, basename) \
		(((val)&MASK_TOPAZ_##basename)>>SHIFT_TOPAZ_##basename)

#define TOPAZ_WAIT_UNTIL_IDLE \
    do { \
	uint8_t tmp_poll_number = 0;\
	uint32_t tmp_reg; \
	if (topaz_priv->topaz_cmd_windex == WB_CCB_CTRL_RINDEX(dev_priv)) { \
		tmp_reg = TOPAZ_GUNIT_READ32(TOPAZ_GUNIT_GVD_PSMI_GFX_OFFSET);\
		if (0 != TOPAZ_READ_BITS(tmp_reg, VEC_BUSY)) { \
			MTX_READ32(TOPAZ_MTX_TXRPT_OFFSET, &tmp_reg);\
			while ((tmp_reg != 0x8ade0000) && \
			       (tmp_poll_number++ < 10)) \
				MTX_READ32(0xc, &tmp_reg); \
			PSB_DEBUG_GENERAL(	\
			  "TOPAZ: TXRPT reg remain: %x,poll %d times.\n",\
			  tmp_reg, tmp_poll_number);\
		} \
	} \
    } while (0)

/* Register CR_BUFFER_SIDEBAND */
#define MVEA_CR_BUFFER_SIDEBAND     0x017C
#define MASK_MVEA_CR_CURR_MB_SBAND  0x00000003
#define SHIFT_MVEA_CR_CURR_MB_SBAND 0
#define REGNUM_MVEA_CR_CURR_MB_SBAND 0x017C

#define MASK_MVEA_CR_ABOVE_PIX_IN_SBAND 0x0000000C
#define SHIFT_MVEA_CR_ABOVE_PIX_IN_SBAND 2
#define REGNUM_MVEA_CR_ABOVE_PIX_IN_SBAND 0x017C

#define MASK_MVEA_CR_CURR_PARAM_SBAND 0x00000030
#define SHIFT_MVEA_CR_CURR_PARAM_SBAND 4
#define REGNUM_MVEA_CR_CURR_PARAM_SBAND 0x017C

#define MASK_MVEA_CR_BELOW_PARAM_IN_SBAND 0x000000C0
#define SHIFT_MVEA_CR_BELOW_PARAM_IN_SBAND 6
#define REGNUM_MVEA_CR_BELOW_PARAM_IN_SBAND 0x017C

#define MASK_MVEA_CR_ABOVE_PARAM_IN_SBAND 0x00000300
#define SHIFT_MVEA_CR_ABOVE_PARAM_IN_SBAND 8
#define REGNUM_MVEA_CR_ABOVE_PARAM_IN_SBAND 0x017C

#define MASK_MVEA_CR_REF_SBAND      0x00000C00
#define SHIFT_MVEA_CR_REF_SBAND     10
#define REGNUM_MVEA_CR_REF_SBAND    0x017C

#define MASK_MVEA_CR_RECON_SBAND    0x00003000
#define SHIFT_MVEA_CR_RECON_SBAND   12
#define REGNUM_MVEA_CR_RECON_SBAND  0x017C

#define MASK_MVEA_CR_ABOVE_PIX_OUT_SBAND 0x0000C000
#define SHIFT_MVEA_CR_ABOVE_PIX_OUT_SBAND 14
#define REGNUM_MVEA_CR_ABOVE_PIX_OUT_SBAND 0x017C

#define MASK_MVEA_CR_BELOW_PARAM_OUT_SBAND 0x00030000
#define SHIFT_MVEA_CR_BELOW_PARAM_OUT_SBAND 16
#define REGNUM_MVEA_CR_BELOW_PARAM_OUT_SBAND 0x017C

#define MASK_MVEA_CR_ABOVE_PARAM_OUT_SBAND 0x000C0000
#define SHIFT_MVEA_CR_ABOVE_PARAM_OUT_SBAND 18
#define REGNUM_MVEA_CR_ABOVE_PARAM_OUT_SBAND 0x017C

/* Register CR_IPE_JITTER_FACTOR */
#define MVEA_CR_IPE_JITTER_FACTOR   0x0218
#define MASK_MVEA_CR_IPE_JITTER_FACTOR 0x00000003
#define SHIFT_MVEA_CR_IPE_JITTER_FACTOR 0
#define REGNUM_MVEA_CR_IPE_JITTER_FACTOR 0x0218

/* Register CR_MULTICORE_INT_STAT */
#define TOPAZSC_CR_MULTICORE_INT_STAT 0x0000
#define MASK_TOPAZSC_CR_INT_STAT_DMAC 0x80000000
#define SHIFT_TOPAZSC_CR_INT_STAT_DMAC 31
#define REGNUM_TOPAZSC_CR_INT_STAT_DMAC 0x0000

#define MASK_TOPAZSC_CR_INT_STAT_CORES 0x7FFFFFFF
#define SHIFT_TOPAZSC_CR_INT_STAT_CORES 0
#define REGNUM_TOPAZSC_CR_INT_STAT_CORES 0x0000

/* Register CR_MULTICORE_CORE_SEL_0 */
#define TOPAZSC_CR_MULTICORE_CORE_SEL_0 0x0004
#define MASK_TOPAZSC_CR_DMAC_CORE_SELECT 0x0000000F
#define SHIFT_TOPAZSC_CR_DMAC_CORE_SELECT 0
#define REGNUM_TOPAZSC_CR_DMAC_CORE_SELECT 0x0004

#define MASK_TOPAZSC_CR_WRITES_CORE_ALL 0x80000000
#define SHIFT_TOPAZSC_CR_WRITES_CORE_ALL 31
#define REGNUM_TOPAZSC_CR_WRITES_CORE_ALL 0x0004

/* Register CR_MULTICORE_CORE_SEL_1 */
#define TOPAZSC_CR_MULTICORE_CORE_SEL_1 0x0008
#define MASK_TOPAZSC_CR_RTM_PORT_CORE_SELECT 0x0000000F
#define SHIFT_TOPAZSC_CR_RTM_PORT_CORE_SELECT 0
#define REGNUM_TOPAZSC_CR_RTM_PORT_CORE_SELECT 0x0008

/* Register CR_MULTICORE_RSVD0 */
#define TOPAZSC_CR_MULTICORE_RSVD0  0x0010
#define MASK_TOPAZSC_CR_RESERVED0   0xFFFFFFFF
#define SHIFT_TOPAZSC_CR_RESERVED0  0
#define REGNUM_TOPAZSC_CR_RESERVED0 0x0010

/* Register CR_MULTICORE_CMD_FIFO_0 */
#define TOPAZSC_CR_MULTICORE_CMD_FIFO_0 0x0014
#define MASK_TOPAZSC_CR_CMD_FIFO_WDATA 0xFFFFFFFF
#define SHIFT_TOPAZSC_CR_CMD_FIFO_WDATA 0
#define REGNUM_TOPAZSC_CR_CMD_FIFO_WDATA 0x0014

/* Register CR_MULTICORE_CMD_FIFO_1 */
#define TOPAZSC_CR_MULTICORE_CMD_FIFO_1 0x0018
#define MASK_TOPAZSC_CR_CMD_FIFO_SPACE 0x000000FF
#define SHIFT_TOPAZSC_CR_CMD_FIFO_SPACE 0
#define REGNUM_TOPAZSC_CR_CMD_FIFO_SPACE 0x0018

#define MASK_TOPAZSC_CR_CMD_FIFO_FULL 0x00000100
#define SHIFT_TOPAZSC_CR_CMD_FIFO_FULL 8
#define REGNUM_TOPAZSC_CR_CMD_FIFO_FULL 0x0018

/* Register CR_MULTICORE_IDLE_PWR_MAN */
#define TOPAZSC_CR_MULTICORE_IDLE_PWR_MAN 0x001C
#define MASK_TOPAZSC_CR_TOPAZ_IDLE_DISABLE 0x00000001
#define SHIFT_TOPAZSC_CR_TOPAZ_IDLE_DISABLE 0
#define REGNUM_TOPAZSC_CR_TOPAZ_IDLE_DISABLE 0x001C

/* Register CR_CMC_PROC_ESB_ACCESS */
#define MVEA_CR_CMC_PROC_ESB_ACCESS 0x011C
#define MASK_MVEA_CR_CMC_PROC_ESB_REGION_NUMBER 0x0000001F
#define SHIFT_MVEA_CR_CMC_PROC_ESB_REGION_NUMBER 0
#define REGNUM_MVEA_CR_CMC_PROC_ESB_REGION_NUMBER 0x011C
#define SIGNED_MVEA_CR_CMC_PROC_ESB_REGION_NUMBER 0


/* Table CR_CMC_ESB_LOGICAL_REGION_SETUP_TABLE */

/* Register CR_CMC_ESB_LOGICAL_REGION_SETUP */
#define MVEA_CR_CMC_ESB_LOGICAL_REGION_SETUP(X) (0x0080 + (4 * (X)))
#define MASK_MVEA_CR_CMC_ESB_REGION_VALID 0x80000000
#define SHIFT_MVEA_CR_CMC_ESB_REGION_VALID 31
#define REGNUM_MVEA_CR_CMC_ESB_REGION_VALID 0x0080
#define SIGNED_MVEA_CR_CMC_ESB_REGION_VALID 0

#define MASK_MVEA_CR_CMC_ESB_REGION_TYPE 0x60000000
#define SHIFT_MVEA_CR_CMC_ESB_REGION_TYPE 29
#define REGNUM_MVEA_CR_CMC_ESB_REGION_TYPE 0x0080
#define SIGNED_MVEA_CR_CMC_ESB_REGION_TYPE 0

#define MASK_MVEA_CR_CMC_ESB_REGION_LOGICAL_WIDTH 0x00F00000
#define SHIFT_MVEA_CR_CMC_ESB_REGION_LOGICAL_WIDTH 20
#define REGNUM_MVEA_CR_CMC_ESB_REGION_LOGICAL_WIDTH 0x0080
#define SIGNED_MVEA_CR_CMC_ESB_REGION_LOGICAL_WIDTH 0

#define MASK_MVEA_CR_CMC_ESB_REGION_LOGICAL_OFFSET_X 0x000F0000
#define SHIFT_MVEA_CR_CMC_ESB_REGION_LOGICAL_OFFSET_X 16
#define REGNUM_MVEA_CR_CMC_ESB_REGION_LOGICAL_OFFSET_X 0x0080
#define SIGNED_MVEA_CR_CMC_ESB_REGION_LOGICAL_OFFSET_X 0

#define MASK_MVEA_CR_CMC_ESB_REGION_PHYS_HEIGHT 0x0000F000
#define SHIFT_MVEA_CR_CMC_ESB_REGION_PHYS_HEIGHT 12
#define REGNUM_MVEA_CR_CMC_ESB_REGION_PHYS_HEIGHT 0x0080
#define SIGNED_MVEA_CR_CMC_ESB_REGION_PHYS_HEIGHT 0

#define MASK_MVEA_CR_CMC_ESB_REGION_PHYS_WIDTH 0x00000F00
#define SHIFT_MVEA_CR_CMC_ESB_REGION_PHYS_WIDTH 8
#define REGNUM_MVEA_CR_CMC_ESB_REGION_PHYS_WIDTH 0x0080
#define SIGNED_MVEA_CR_CMC_ESB_REGION_PHYS_WIDTH 0

#define MASK_MVEA_CR_CMC_ESB_REGION_PHYS_ORIGIN_Y 0x000000F0
#define SHIFT_MVEA_CR_CMC_ESB_REGION_PHYS_ORIGIN_Y 4
#define REGNUM_MVEA_CR_CMC_ESB_REGION_PHYS_ORIGIN_Y 0x0080
#define SIGNED_MVEA_CR_CMC_ESB_REGION_PHYS_ORIGIN_Y 0

#define MASK_MVEA_CR_CMC_ESB_REGION_PHYS_ORIGIN_X 0x0000000F
#define SHIFT_MVEA_CR_CMC_ESB_REGION_PHYS_ORIGIN_X 0
#define REGNUM_MVEA_CR_CMC_ESB_REGION_PHYS_ORIGIN_X 0x0080
#define SIGNED_MVEA_CR_CMC_ESB_REGION_PHYS_ORIGIN_X 0


/* Bit 31:16 is the count of remaining items to be transferred */
/* Bit 0 is 1 if transfer State == 'do_nothing'*/
#define MTX_CR_MTX_SYSC_CDMAS0      0x0348

/* Bit 25:2 is the current core DMA transfer address.*/
#define MTX_CR_MTX_SYSC_CDMAS1      0x034C

/* Bit 31:0 is the data to be wroten */
#define MTX_CR_MTX_SYSC_CDMAT       0x0350

/* Number of entries in table CR_CMC_ESB_LOGICAL_REGION_SETUP_TABLE */

#define MVEA_CR_CMC_ESB_LOGICAL_REGION_SETUP_TABLE_SIZE_UINT32 32
#define MVEA_CR_CMC_ESB_LOGICAL_REGION_SETUP_TABLE_NUM_ENTRIES 32

#define ESB_HWSYNC      10
#define ESB_POS_MANGLER_ORIGINX(x) ((x) >> 3)
#define ESB_POS_MANGLER(x) ((x) >> 3)

#define ESB_SIZE_MANGLER(x) (((x) >> 3) - 1)
#define REGION_TYPE_LINEAR 0

#define TOPAZSC_ESB_REGION_Y_MAX		(46)
#define TOPAZSC_ESB_REGION_X_MAX		(64)

#define TOPAZSC_ESB_REGION_HEIGH		(48)
#define TOPAZSC_ESB_REGION_WIDTH		(64)


#define REG_OFFSET_COMMS_CORE_HOST	0x00070000
#define REG_SIZE_COMMS_CORE_HOST	0x00070000
#define REG_OFFSET_TOPAZ_COMMS_HOST	0x00007000
#define REG_SIZE_TOPAZ_COMMS_HOST	0x00001000
#define TOPAZ_COMMS_START 0x07000
/* Register CR_STAT_1 */
#define TOPAZ_COMMS_CR_STAT_1(X)    (0x0018 + (192 * (X)))
#define MASK_TOPAZ_COMMS_CR_STAT_DATA_1 0xFFFFFFFF
#define SHIFT_TOPAZ_COMMS_CR_STAT_DATA_1 0
#define REGNUM_TOPAZ_COMMS_CR_STAT_DATA_1 0x0018

/* Register CR_STAT_0 */
#define TOPAZ_COMMS_CR_STAT_0(X)    (0x0014 + (192 * (X)))
#define MASK_TOPAZ_COMMS_CR_STAT_DATA_0 0xFFFFFFFF
#define SHIFT_TOPAZ_COMMS_CR_STAT_DATA_0 0
#define REGNUM_TOPAZ_COMMS_CR_STAT_DATA_0 0x0014

/* Register CR_MTX_STATUS */
#define TOPAZ_COMMS_CR_MTX_STATUS(X) (0x0010 + (192 * (X)))
#define MASK_TOPAZ_COMMS_FLAGS_WORD 0xFFFFFFFF
#define SHIFT_TOPAZ_COMMS_FLAGS_WORD 0
#define REGNUM_TOPAZ_COMMS_FLAGS_WORD 0x0010

/* Register CR_CMD_WB_VAL */
#define TOPAZ_COMMS_CR_CMD_WB_VAL(X) (0x000C + (192 * (X)))
#define MASK_TOPAZ_COMMS_CR_WB_VAL  0xFFFFFFFF
#define SHIFT_TOPAZ_COMMS_CR_WB_VAL 0
#define REGNUM_TOPAZ_COMMS_CR_WB_VAL 0x000C

/* Register CR_CMD_WB_ADDR */
#define TOPAZ_COMMS_CR_CMD_WB_ADDR(X) (0x0008 + (192 * (X)))
#define MASK_TOPAZ_COMMS_CR_WB_ADDR 0xFFFFFFFF
#define SHIFT_TOPAZ_COMMS_CR_WB_ADDR 0
#define REGNUM_TOPAZ_COMMS_CR_WB_ADDR 0x0008

/* Register CR_CMD_DATA_ADDR */
#define TOPAZ_COMMS_CR_CMD_DATA_ADDR(X) (0x0004 + (192 * (X)))
#define MASK_TOPAZ_COMMS_CR_DATA_ADDR 0xFFFFFFFF
#define SHIFT_TOPAZ_COMMS_CR_DATA_ADDR 0
#define REGNUM_TOPAZ_COMMS_CR_DATA_ADDR 0x0004
/* Register CR_TOPAZ_HW_CFG */
#define TOPAZ_CR_TOPAZ_HW_CFG       0x0050
#define MASK_TOPAZ_CR_NUM_CORES_SUPPORTED 0x0000001F
#define SHIFT_TOPAZ_CR_NUM_CORES_SUPPORTED 0
#define REGNUM_TOPAZ_CR_NUM_CORES_SUPPORTED 0x0050
/* Register CR_CMD_WORD */
#define TOPAZ_COMMS_CR_CMD_WORD(X)  (0x0000 + (192 * (X)))
#define MASK_TOPAZ_COMMS_CR_MTX_CMD_ID 0x0000007F
#define SHIFT_TOPAZ_COMMS_CR_MTX_CMD_ID 0
#define REGNUM_TOPAZ_COMMS_CR_MTX_CMD_ID 0x0000
#define MTX_CR_MTX_SYSC_CDMAT       0x0350
#define MASK_MTX_TRANSFERDATA       0xFFFFFFFF
#define SHIFT_MTX_TRANSFERDATA      0
#define REGNUM_MTX_TRANSFERDATA     0x0350


#define COMMS_WRITE32(offset, value, core) \
		MM_WRITE32(TOPAZ_COMMS_START + TOPAZ_CORE_REG_BASE(core), \
				offset, value)
#define COMMS_READ32(offset, pointer, core) \
		MM_READ32(TOPAZ_COMMS_START + TOPAZ_CORE_REG_BASE(core), \
				offset, pointer)

#define TOPAZ_CORE_NUMBER_SET_OFFSET (0x100 + (2 << 2))

#define REG_SIZE_COMMS_CORE_HOST	0x00070000
#define MVEASETUPESBREGION(_OriginX_, _OriginY_, _PhysWidth_,\
		_PhysHeight_, _LogWidth_, _RegType_)\
((F_ENCODE(ESB_POS_MANGLER_ORIGINX(_OriginX_),\
	   MVEA_CR_CMC_ESB_REGION_PHYS_ORIGIN_X))\
 | (F_ENCODE(ESB_POS_MANGLER(_OriginY_),\
		 MVEA_CR_CMC_ESB_REGION_PHYS_ORIGIN_Y))\
 | (F_ENCODE(ESB_SIZE_MANGLER(_PhysWidth_),\
		 MVEA_CR_CMC_ESB_REGION_PHYS_WIDTH))\
 | (F_ENCODE(ESB_SIZE_MANGLER(_PhysHeight_),\
		 MVEA_CR_CMC_ESB_REGION_PHYS_HEIGHT))\
 | (F_ENCODE(ESB_SIZE_MANGLER(_LogWidth_),\
		 MVEA_CR_CMC_ESB_REGION_LOGICAL_WIDTH))\
 | (F_ENCODE(_RegType_, MVEA_CR_CMC_ESB_REGION_TYPE))\
 | (F_ENCODE(1, MVEA_CR_CMC_ESB_REGION_VALID)))


#define TOPAZ_MULTICORE_START		0x00000000

#ifdef TOPAZ_PDUMP
#define TOPAZ_MULTICORE_WRITE32(offset, value) \
	do { \
		MM_WRITE32(TOPAZ_MULTICORE_START, offset, value); \
		DRM_ERROR("TOPAZ_PDUMP: MULTICORE, REG_WT %x %x\n", offset, value);\
	} while (0)

#define TOPAZ_MULTICORE_READ32(offset, pointer) \
	do { \
		MM_READ32(TOPAZ_MULTICORE_START, offset, pointer); \
		DRM_ERROR("TOPAZ_PDUMP: MULTICORE, REG_RD %x %x\n", offset, *(uint32_t *)pointer); \
	} while (0)
#else
#define TOPAZ_MULTICORE_WRITE32(offset, value) \
	MM_WRITE32(TOPAZ_MULTICORE_START, offset, value)
#define TOPAZ_MULTICORE_READ32(offset, pointer) \
	MM_READ32(TOPAZ_MULTICORE_START, offset, pointer)
#endif

#define MTX_DMA_BURSTSIZE_BYTES 32
#define MTX_DMA_ALIGNMENT_BYTES 16

#define MTX_DMA_MEMORY_BASE (0x82880000)
#define PC_START_ADDRESS    (0x80900000)

#define MAX_TOPAZ_CMD_COUNT	(0x1000) /* max syncStatus value used*/

/* It's the default value after reset */
#define VEC_CG_DIS_MASK (0x007fffff)

#define MTX_WRITEBACK_DATASIZE_ROUND 4

#define TOPAZ_MTX_WB_READ32(base, core, word, pointer) \
    do { \
	*(uint32_t *)(pointer) = *((uint32_t *)(base) + \
		(core) * MTX_WRITEBACK_DATASIZE_ROUND + (word)); \
    } while (0)

#define TOPAZ_MTX_WB_WRITE32(base, core, word, value) \
    do { \
	 *((uint32_t *)(base) + (core) * MTX_WRITEBACK_DATASIZE_ROUND + (word)) \
	    = value; \
    } while (0)


#define TOPAZ_MTX_WB_OFFSET(base, core) \
    ((base) + (core)*MTX_WRITEBACK_DATASIZE_ROUND*4)

#define POLL_TOPAZ_FREE_FIFO_SPACE(word_num, delay, retries, pointer) \
    do { \
	uint32_t free_space = 0, i; \
	for (i = 0; i < retries; i++) { \
	    TOPAZ_MULTICORE_READ32(TOPAZSC_CR_MULTICORE_CMD_FIFO_1, &free_space);\
	    free_space &= MASK_TOPAZSC_CR_CMD_FIFO_SPACE; \
	    if (free_space >= word_num) \
		break; \
	    else \
		PSB_UDELAY(delay); \
	} \
	if (i >= retries) { \
	    ret  = -1;\
	    DRM_ERROR("TOPAZ: poll FIFO free space failed (%d words free)!\n", free_space); \
	} \
	else \
	    ret = 0; \
	*pointer = free_space; \
    } while (0)


/* **************** DMAC define **************** */
enum  DMAC_eBSwap {
	DMAC_BSWAP_NO_SWAP = 0x0,/*  No byte swapping will be performed. */
	DMAC_BSWAP_REVERSE = 0x1,/*  Byte order will be reversed. */
};

enum DMAC_ePW {
	DMAC_PWIDTH_32_BIT = 0x0,/*  Peripheral width 32-bit. */
	DMAC_PWIDTH_16_BIT = 0x1,/*  Peripheral width 16-bit. */
	DMAC_PWIDTH_8_BIT = 0x2,/*  Peripheral width 8-bit. */
};

enum DMAC_eAccDel {
	DMAC_ACC_DEL_0 = 0x0,	/*  Access delay zero clock cycles */
	DMAC_ACC_DEL_256 = 0x1,	/*  Access delay 256 clock cycles */
	DMAC_ACC_DEL_512 = 0x2,	/*  Access delay 512 clock cycles */
	DMAC_ACC_DEL_768 = 0x3,	/*  Access delay 768 clock cycles */
	DMAC_ACC_DEL_1024 = 0x4,/*  Access delay 1024 clock cycles */
	DMAC_ACC_DEL_1280 = 0x5,/*  Access delay 1280 clock cycles */
	DMAC_ACC_DEL_1536 = 0x6,/*  Access delay 1536 clock cycles */
	DMAC_ACC_DEL_1792 = 0x7,/*  Access delay 1792 clock cycles */
};

enum  DMAC_eBurst {
	DMAC_BURST_0 = 0x0,	/*  burst size of 0 */
	DMAC_BURST_1 = 0x1,	/*  burst size of 1 */
	DMAC_BURST_2 = 0x2,	/*  burst size of 2 */
	DMAC_BURST_3 = 0x3,	/*  burst size of 3 */
	DMAC_BURST_4 = 0x4,	/*  burst size of 4 */
	DMAC_BURST_5 = 0x5,	/*  burst size of 5 */
	DMAC_BURST_6 = 0x6,     /*  burst size of 6 */
	DMAC_BURST_7 = 0x7,	/*  burst size of 7 */
};

/* commands for topaz,shared with user space driver */
enum drm_pnw_topaz_cmd {
	MTX_CMDID_NULL = 0,
	MTX_CMDID_SHUTDOWN = 1,
	MTX_CMDID_START_PIC = 2,
	MTX_CMDID_DO_HEADER = 3,
	MTX_CMDID_ENCODE_SLICE = 4,
	MTX_CMDID_END_PIC = 5,
	MTX_CMDID_FLUSH = 6,
	/*JPEG commands*/
	MTX_CMDID_SETQUANT = 7,
	MTX_CMDID_RESET_ENCODE = 8,
	MTX_CMDID_ISSUEBUFF = 9,
	MTX_CMDID_SETUP = 10,

	MTX_CMDID_PAD = 0x7a, /*Will be ignored*/
	MTX_CMDID_SW_WRITEREG = 0x7b,
	MTX_CMDID_SW_LEAVE_LOWPOWER = 0x7c,
	MTX_CMDID_SW_ENTER_LOWPOWER = 0x7e,
	MTX_CMDID_SW_NEW_CODEC = 0x7f
};

struct topaz_cmd_header {
	union {
		struct {
			unsigned long id:7;
			unsigned long enable_interrupt:1;
			unsigned long core:8;
			unsigned long seq:16;
		};
		uint32_t val;
	};
};

/*
 * codecs topaz supports,shared with user space driver.
 * PNW_TOPAZ_CODEC_NUM_MAX should be modified if the number
 * of codecs is changed
 */
enum drm_pnw_topaz_codec {
	IMG_CODEC_JPEG = 0,
	IMG_CODEC_H264_NO_RC,
	IMG_CODEC_H264_VBR,
	IMG_CODEC_H264_CBR,
	IMG_CODEC_H263_NO_RC,
	IMG_CODEC_H263_VBR,
	IMG_CODEC_H263_CBR,
	IMG_CODEC_MPEG4_NO_RC,
	IMG_CODEC_MPEG4_VBR,
	IMG_CODEC_MPEG4_CBR,
	IMG_CODEC_H264_VCM,
};


typedef enum {
	MTX_WRITEBACK_CMDWORD = 0, /* Command word executed by MTX */
	MTX_WRITEBACK_VALUE = 1, /* Writeback value returned by command */
	MTX_WRITEBACK_FLAGSWORD_0 = 2, /* Flags word indicating MTX status */
	MTX_WRITEBACK_BITSWRITTEN = 3, /* number of bits written out */
	MTX_WRITEBACK_DATASIZE /* End marker for enum */
} MTX_eWriteBackData;

/* pnw_topazinit.c */
int pnw_topaz_reset(struct drm_psb_private *dev_priv);
int pnw_topaz_init_fw(struct drm_device *dev);
int pnw_topaz_setup_fw(struct drm_device *dev, enum drm_pnw_topaz_codec codec);
int pnw_topaz_wait_for_register(struct drm_psb_private *dev_priv,
				uint32_t addr, uint32_t value,
				uint32_t enable);
void pnw_topaz_mmu_flushcache(struct drm_psb_private *dev_priv);

uint32_t psb_get_default_pd_addr(struct psb_mmu_driver *driver);
int pnw_topaz_kick_null_cmd(struct drm_psb_private *dev_priv,
			    uint32_t core_id,
			    uint32_t wb_offset,
			    uint32_t sync_req,
			    uint8_t irq_enable);
int pnw_wait_on_sync(struct drm_psb_private *dev_priv,
		     uint32_t sync_seq,
		     uint32_t *sync_p);

static inline char *cmd_to_string(int cmd_id)
{
	switch (cmd_id) {
	case MTX_CMDID_START_PIC:
		return "MTX_CMDID_START_PIC";
	case MTX_CMDID_END_PIC:
		return "MTX_CMDID_END_PIC";
	case MTX_CMDID_DO_HEADER:
		return "MTX_CMDID_DO_HEADER";
	case MTX_CMDID_ENCODE_SLICE:
		return "MTX_CMDID_ENCODE_SLICE";
	case MTX_CMDID_SW_NEW_CODEC:
		return "MTX_CMDID_SW_NEW_CODEC";
	case MTX_CMDID_SETQUANT:
		return "MTX_CMDID_SETQUANT";
	case MTX_CMDID_RESET_ENCODE:
		return "MTX_CMDID_RESET_ENCODE";
	case MTX_CMDID_ISSUEBUFF:
		return "MTX_CMDID_ISSUEBUFF";
	case MTX_CMDID_SETUP:
		return "MTX_CMDID_SETUP";
	case MTX_CMDID_SW_WRITEREG:
		return "MTX_CMDID_SW_WRITEREG";
	default:
		return "Undefined command";

	}
}

static inline char *codec_to_string(int codec)
{
	switch (codec) {
	case IMG_CODEC_JPEG:
		return "JPEG";
	case IMG_CODEC_H264_NO_RC:
		return "H264_NO_RC";
	case IMG_CODEC_H264_VBR:
		return "H264_VBR";
	case IMG_CODEC_H264_CBR:
		return "H264_CBR";
	case IMG_CODEC_H263_NO_RC:
		return "H263_NO_RC";
	case IMG_CODEC_H263_VBR:
		return "H263_VBR";
	case IMG_CODEC_H263_CBR:
		return "H263_CBR";
	case IMG_CODEC_MPEG4_NO_RC:
		return "MPEG4_NO_RC";
	case IMG_CODEC_MPEG4_VBR:
		return "MPEG4_VBR";
	case IMG_CODEC_MPEG4_CBR:
		return "MPEG4_CBR";
	case IMG_CODEC_H264_VCM:
		return "H264_VCM";
	default:
		return "Undefined codec";
	}
}

static inline void pnw_topaz_clearirq(struct drm_device *dev,
				      uint32_t clear_topaz)
{
	struct drm_psb_private *dev_priv = dev->dev_private;

	PSB_DEBUG_GENERAL("TOPAZ: clear IRQ\n");
	if (clear_topaz != 0)
		TOPAZ_WRITE32(TOPAZ_CR_IMG_TOPAZ_INTCLEAR, clear_topaz, 0);

	/* PSB_WVDC32(_PNW_IRQ_TOPAZ_FLAG, PSB_INT_IDENTITY_R); */
}

static inline uint32_t pnw_topaz_queryirq(struct drm_device *dev)
{
	struct drm_psb_private *dev_priv = dev->dev_private;
	uint32_t val, /* iir, */ clear = 0;
	struct pnw_topaz_private *topaz_priv = dev_priv->topaz_private;

	TOPAZ_READ32(TOPAZ_CR_IMG_TOPAZ_INTSTAT, &val, 0);
	/* iir = PSB_RVDC32(PSB_INT_IDENTITY_R); */

	(void) topaz_priv;

	if ((val == 0) /* && (iir == 0) */) {/* no interrupt */
		PSB_DEBUG_GENERAL("TOPAZ: no interrupt,IIR=TOPAZ_INTSTAT=0\n");
		return 0;
	}

	PSB_DEBUG_IRQ("TOPAZ:TOPAZ_INTSTAT=0x%08x\n", val);

	if (val & (1 << 31))
		PSB_DEBUG_IRQ("TOPAZ:IRQ pin activated,cmd seq=0x%04x,"
			      "sync seq: 0x%08x\n",
			      dev_priv->sequence[LNC_ENGINE_ENCODE],
			      *((uint32_t *)topaz_priv->topaz_mtx_wb + MTX_WRITEBACK_VALUE));
	else
		PSB_DEBUG_IRQ("TOPAZ:IRQ pin not activated,cmd seq=0x%04x,"
			      "sync seq: 0x%08x\n",
			      dev_priv->sequence[LNC_ENGINE_ENCODE],
			      *((uint32_t *)topaz_priv->topaz_mtx_wb + MTX_WRITEBACK_VALUE));

	if (val & 0x8) {
		uint32_t mmu_status, mmu_req;

		TOPAZ_READ32(TOPAZ_CR_MMU_STATUS, &mmu_status, 0);
		TOPAZ_READ32(TOPAZ_CR_MMU_MEM_REQ, &mmu_req, 0);

		PSB_DEBUG_IRQ("TOPAZ: detect a page fault interrupt, "
			      "address=0x%08x,mem req=0x%08x\n",
			      mmu_status, mmu_req);
		clear |= F_ENCODE(1, TOPAZ_CR_IMG_TOPAZ_INTCLR_MMU_FAULT);
	}

	if (val & 0x4) {
		PSB_DEBUG_IRQ("TOPAZ: detect a MTX_HALT interrupt\n");
		clear |= F_ENCODE(1, TOPAZ_CR_IMG_TOPAZ_INTCLR_MTX_HALT);
	}

	if (val & 0x2) {
		PSB_DEBUG_IRQ("TOPAZ: detect a MTX interrupt\n");
		clear |= F_ENCODE(1, TOPAZ_CR_IMG_TOPAZ_INTCLR_MTX);
	}

	if (val & 0x1) {
		PSB_DEBUG_IRQ("TOPAZ: detect a MVEA interrupt\n");
		clear |= F_ENCODE(1, TOPAZ_CR_IMG_TOPAZ_INTCLR_MVEA);
	}

	return clear;
}

/*Set whether the write operation take effect on all cores
 * or only the specific one*/
static inline void topaz_set_mtx_target(struct drm_psb_private *dev_priv,
					uint32_t core, uint8_t bTargetAll)
{
	TOPAZ_MULTICORE_WRITE32(
		TOPAZSC_CR_MULTICORE_CORE_SEL_0,
		F_ENCODE((bTargetAll), TOPAZSC_CR_WRITES_CORE_ALL) |
		F_ENCODE(core, TOPAZSC_CR_DMAC_CORE_SELECT));

}

#endif	/* _PNW_TOPAZ_H_ */
